#!/usr/bin/env zsh
set -eu -o pipefail

cd "$(dirname "$0")"

rm -rf nimbus-eth2
git clone -b "dev/etan/lc-wasm" "https://github.com/status-im/nimbus-eth2"
cd nimbus-eth2

ulimit -n 1024
export USE_SYSTEM_NIM=0
make -j deps
source env.sh

cd -
nim --version

git -C nimbus-eth2/vendor/nimbus-build-system/vendor/Nim apply <<'EOF'
diff --git a/lib/system/threads.nim b/lib/system/threads.nim
index 4e27ba24e..bf154e874 100644
--- a/lib/system/threads.nim
+++ b/lib/system/threads.nim
@@ -383,6 +383,13 @@ when defined(windows):
       threadId = int(getCurrentThreadId())
     result = threadId

+elif defined(emscripten):
+  proc getThreadId*(): int =
+    ## Gets the ID of the currently running thread.
+    if threadId == 0:
+      threadId = cast[int](addr threadId)
+    result = threadId
+
 elif defined(linux):
   proc syscall(arg: clong): clong {.varargs, importc: "syscall", header: "<unistd.h>".}
   when defined(amd64):
EOF

git -C nimbus-eth2/vendor/nim-eth apply <<'EOF'
diff --git a/eth/p2p/discoveryv5/random2.nim b/eth/p2p/discoveryv5/random2.nim
index 265e0a1..b70f30f 100644
--- a/eth/p2p/discoveryv5/random2.nim
+++ b/eth/p2p/discoveryv5/random2.nim
@@ -8,16 +8,53 @@

 {.push raises: [].}

-import
-  bearssl/rand
+import std/typetraits

-export rand
+when defined(emscripten):
+  type SecureRngContext* = object
+    discard

-## Random helpers: similar as in stdlib, but with HmacDrbgContext rng
+  proc EM_ASM(
+      code: cstring
+  ) {.importc: "EM_ASM", header: "<emscripten.h>", varargs.}
+
+  proc fillRandomBytes(arr: pointer, n: int) =
+    doAssert n <= 65536  # QuotaExceededError
+    static:
+      doAssert sizeof(pointer) == sizeof(cint)
+      doAssert sizeof(int) == sizeof(cint)
+    EM_ASM(
+      "let arr = new Uint8Array($1);" &
+      "crypto.getRandomValues(arr);" &
+      "for (let i = 0; i < $1; i++) {" &
+      "    setValue($0 + i, arr[i]);" &
+      "    arr[i] = 0;" &
+      "}",
+      arr, n)
+
+  func generate*(ctx: var SecureRngContext, v: var auto) =
+    ## Fill `v` with random data - `v` must be a simple type
+    static: doAssert supportsCopyMem(type v)
+
+    when sizeof(v) > 0:
+      when v is bool:
+        # `bool` would result in a heavily biased value because >0 == true
+        var tmp: byte
+        fillRandomBytes(addr tmp, sizeof(tmp))
+        v = (tmp and 1'u8) == 1
+      else:
+        fillRandomBytes(addr v, sizeof(v))
+
+else:
+  import bearssl/rand
+  export rand
+  type SecureRngContext* = HmacDrbgContext
+
+## Random helpers: similar as in stdlib, but with SecureRngContext rng
 # TODO: Move these somewhere else?
 const randMax = 18_446_744_073_709_551_615'u64

-proc rand*(rng: var HmacDrbgContext, max: Natural): int =
+proc rand*(rng: var SecureRngContext, max: Natural): int =
   if max == 0: return 0

   var x: uint64
@@ -26,10 +63,10 @@ proc rand*(rng: var HmacDrbgContext, max: Natural): int =
     if x < randMax - (randMax mod (uint64(max) + 1'u64)): # against modulo bias
       return int(x mod (uint64(max) + 1'u64))

-proc sample*[T](rng: var HmacDrbgContext, a: openArray[T]): T =
+proc sample*[T](rng: var SecureRngContext, a: openArray[T]): T =
   a[rng.rand(a.high)]

-proc shuffle*[T](rng: var HmacDrbgContext, a: var openArray[T]) =
+proc shuffle*[T](rng: var SecureRngContext, a: var openArray[T]) =
   for i in countdown(a.high, 1):
     let j = rng.rand(i)
     swap(a[i], a[j])
EOF

rm -rf light_client_wasm.js light_client_wasm.wasm light_client_wasm.worker.js nimcache
nim c \
    -d:disable_libbacktrace \
    -d:disableLTO \
    -d:emscripten \
    -d:release \
    --debuginfo:off \
    --nimcache:nimcache \
    --os:linux \
    --cpu:wasm32 \
    --cc:clang \
    --clang.exe:emcc \
    --clang.linkerexe:emcc \
    --gc:arc \
    --exceptions:goto \
    --define:noSignalHandler \
    --define:danger \
    --panics:on \
    --passC:-fpic \
    --passL:-Os \
    --passL:-fpic \
    --passC:'-pthread' \
    --passL:'-pthread' \
    --passC:'-sASSERTIONS' \
    --passL:'-sASSERTIONS' \
    --passC:'-sINITIAL_MEMORY=256MB' \
    --passL:'-sINITIAL_MEMORY=256MB' \
    --passC:'-sSTACK_SIZE=128MB' \
    --passL:'-sSTACK_SIZE=128MB' \
    --passC:'-sUSE_PTHREADS=1' \
    --passL:'-sUSE_PTHREADS=1' \
    --passL:'-sEXPORTED_FUNCTIONS="[_free, _malloc, _ETHRandomNumberCreate, _ETHRandomNumberGet, _ETHRuntimeConfigCreateFromYaml, _ETHRuntimeConfigGetConsensusForkAtEpoch, _ETHBeaconStateCreateFromSsz, _ETHBeaconStateDestroy, _ETHBeaconStateCopyGenesisValidatorsRoot, _ETHForkDigestsCreateFromState, _ETHBeaconClockCreateFromState, _ETHBeaconClockGetSlot, _ETHLightClientStoreCreateFromBootstrap, _ETHLightClientStoreDestroy, _ETHLightClientStoreProcessUpdatesByRange, _ETHLightClientStoreProcessFinalityUpdate, _ETHLightClientStoreProcessOptimisticUpdate, _kETHLCSyncKind_UpdatesByRange, _kETHLCSyncKind_FinalityUpdate, _kETHLCSyncKind_OptimisticUpdate, _ETHLightClientStoreGetNextSyncTask, _ETHLightClientStoreGetMillisecondsToNextFetch, _ETHLightClientStoreGetFinalizedHeader, _ETHLightClientStoreGetOptimisticHeader, _ETHLightClientHeaderGetBeacon, _ETHBeaconBlockHeaderGetRoot, _ETHBeaconBlockHeaderGetSlot, _ETHBeaconBlockHeaderGetProposerIndex, _ETHBeaconBlockHeaderGetParentRoot, _ETHBeaconBlockHeaderGetStateRoot, _ETHBeaconBlockHeaderGetBodyRoot]"' \
    --passL:'-sEXPORTED_RUNTIME_METHODS="[stringToNewUTF8]"' \
    --passL:'-Wl,--no-entry' \
    --noMain:on \
    --passL:'-o light_client_wasm.js' \
    nimbus-eth2/beacon_chain/light_client_wasm.nim
